'use client';

import { useEffect } from 'react';

interface TicketData {
  participant: {
    name: string;
    email: string;
    registrationId: string;
  };
  event: {
    title: string;
    description: string;
    date: string;
    venue: string;
  };
  qrCodeData: string;
}

interface TicketGeneratorProps {
  ticketData: TicketData;
}

export default function TicketGenerator({ ticketData }: TicketGeneratorProps) {
  useEffect(() => {
    generateAndDownloadTicket();
  }, [ticketData]);

  const generateAndDownloadTicket = async () => {
    try {
      const { jsPDF } = await import('jspdf');
      
      // Create PDF document
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Set font
      pdf.setFont('helvetica');
      
      // Title
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text(ticketData.event.title, pageWidth / 2, 30, { align: 'center' });
      
      // Subtitle
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Event Ticket', pageWidth / 2, 40, { align: 'center' });
      
      // Add border
      pdf.rect(20, 50, pageWidth - 40, pageHeight - 100);
      
      // Participant Details Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Participant Details', 30, 70);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Name: ${ticketData.participant.name}`, 30, 85);
      pdf.text(`Email: ${ticketData.participant.email}`, 30, 95);
      pdf.text(`Registration ID: ${ticketData.participant.registrationId}`, 30, 105);
      
      // Event Details Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Event Details', 30, 125);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Date: ${new Date(ticketData.event.date).toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`, 30, 140);
      pdf.text(`Venue: ${ticketData.event.venue}`, 30, 150);
      pdf.text(`Description: ${ticketData.event.description}`, 30, 160);
      
      // QR Code Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Check-in QR Code', pageWidth / 2, 180, { align: 'center' });
      
      // Add QR code image
      const qrCodeImage = `data:image/png;base64,${ticketData.qrCodeData}`;
      pdf.addImage(qrCodeImage, 'PNG', pageWidth / 2 - 25, 190, 50, 50);
      
      // Instructions
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Present this QR code at the event for check-in', pageWidth / 2, 250, { align: 'center' });
      
      // Footer
      pdf.setFontSize(8);
      pdf.text('Generated by STAMPED Event Management System', pageWidth / 2, pageHeight - 20, { align: 'center' });
      
      // Download the PDF
      pdf.save(`${ticketData.event.title}-ticket.pdf`);
      
    } catch (error) {
      console.error('Ticket generation failed:', error);
    }
  };


  return null; // This component doesn't render anything visible
}
