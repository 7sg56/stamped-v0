'use client';

import { useEffect } from 'react';

interface TicketData {
  participant: {
    name: string;
    email: string;
    registrationId: string;
  };
  event: {
    title: string;
    description: string;
    date: string;
    venue: string;
  };
  qrCodeData: string;
}

interface TicketGeneratorProps {
  ticketData: TicketData;
}

export default function TicketGenerator({ ticketData }: TicketGeneratorProps) {
  useEffect(() => {
    generateAndDownloadTicket();
  }, [ticketData]);

  const generateAndDownloadTicket = async () => {
    try {
      const { jsPDF } = await import('jspdf');
      
      // Create PDF document
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Set font
      pdf.setFont('helvetica');
      
      // Title
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text(ticketData.event.title, pageWidth / 2, 30, { align: 'center' });
      
      // Subtitle
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Event Ticket', pageWidth / 2, 40, { align: 'center' });
      
      // Add border
      pdf.rect(20, 50, pageWidth - 40, pageHeight - 100);
      
      // Participant Details Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Participant Details', 30, 70);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Name: ${ticketData.participant.name}`, 30, 85);
      pdf.text(`Email: ${ticketData.participant.email}`, 30, 95);
      pdf.text(`Registration ID: ${ticketData.participant.registrationId}`, 30, 105);
      
      // Event Details Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Event Details', 30, 125);
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Date: ${new Date(ticketData.event.date).toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`, 30, 140);
      pdf.text(`Venue: ${ticketData.event.venue}`, 30, 150);
      pdf.text(`Description: ${ticketData.event.description}`, 30, 160);
      
      // QR Code Section
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Check-in QR Code', pageWidth / 2, 180, { align: 'center' });
      
      // Add QR code image
      const qrCodeImage = `data:image/png;base64,${ticketData.qrCodeData}`;
      pdf.addImage(qrCodeImage, 'PNG', pageWidth / 2 - 25, 190, 50, 50);
      
      // Instructions
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Present this QR code at the event for check-in', pageWidth / 2, 250, { align: 'center' });
      
      // Footer
      pdf.setFontSize(8);
      pdf.text('Generated by STAMPED Event Management System', pageWidth / 2, pageHeight - 20, { align: 'center' });
      
      // Download the PDF
      pdf.save(`${ticketData.event.title}-ticket.pdf`);
      
    } catch (error) {
      console.error('Ticket generation failed:', error);
      // Fallback: try PNG generation
      generatePNGTicket();
    }
  };

  const generatePNGTicket = async () => {
    try {
      const { html2canvas } = await import('html2canvas');
      
      // Create a temporary div with ticket content
      const ticketDiv = document.createElement('div');
      ticketDiv.style.width = '600px';
      ticketDiv.style.height = '800px';
      ticketDiv.style.padding = '40px';
      ticketDiv.style.backgroundColor = 'white';
      ticketDiv.style.fontFamily = 'Arial, sans-serif';
      ticketDiv.style.border = '2px solid #333';
      ticketDiv.style.position = 'absolute';
      ticketDiv.style.left = '-9999px';
      ticketDiv.style.top = '-9999px';
      
      ticketDiv.innerHTML = `
        <div style="text-align: center; margin-bottom: 40px;">
          <h1 style="font-size: 28px; font-weight: bold; margin: 0; color: #333;">${ticketData.event.title}</h1>
          <p style="font-size: 18px; margin: 10px 0; color: #666;">Event Ticket</p>
        </div>
        
        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 16px; font-weight: bold; margin: 0 0 15px 0; color: #333;">Participant Details</h2>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Name:</strong> ${ticketData.participant.name}</p>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Email:</strong> ${ticketData.participant.email}</p>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Registration ID:</strong> ${ticketData.participant.registrationId}</p>
        </div>
        
        <div style="margin-bottom: 30px;">
          <h2 style="font-size: 16px; font-weight: bold; margin: 0 0 15px 0; color: #333;">Event Details</h2>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Date:</strong> ${new Date(ticketData.event.date).toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}</p>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Venue:</strong> ${ticketData.event.venue}</p>
          <p style="margin: 8px 0; font-size: 14px;"><strong>Description:</strong> ${ticketData.event.description}</p>
        </div>
        
        <div style="text-align: center; margin-top: 40px;">
          <h2 style="font-size: 16px; font-weight: bold; margin: 0 0 20px 0; color: #333;">Check-in QR Code</h2>
          <img src="data:image/png;base64,${ticketData.qrCodeData}" alt="QR Code" style="width: 150px; height: 150px; border: 1px solid #ddd;" />
          <p style="margin: 15px 0; font-size: 12px; color: #666;">Present this QR code at the event for check-in</p>
        </div>
        
        <div style="text-align: center; margin-top: 40px; font-size: 10px; color: #999;">
          Generated by STAMPED Event Management System
        </div>
      `;
      
      document.body.appendChild(ticketDiv);
      
      const canvas = await html2canvas(ticketDiv, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        width: 600,
        height: 800
      });
      
      document.body.removeChild(ticketDiv);
      
      const link = document.createElement('a');
      link.download = `${ticketData.event.title}-ticket.png`;
      link.href = canvas.toDataURL();
      link.click();
      
    } catch (error) {
      console.error('PNG ticket generation failed:', error);
    }
  };

  return null; // This component doesn't render anything visible
}
